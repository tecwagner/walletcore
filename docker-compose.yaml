version: '3.9'

services:
  goapp: 
    container_name: goapp
    build: .
    platform: linux/amd64
    volumes:
      - .:/app
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: "${OTEL_EXPORTER_OTLP_ENDPOINT}"
      JAEGER_TRACEPROVIDER: "${JAEGER_TRACEPROVIDER}"    
    ports:
      - 8081:8081
    depends_on:
      - mysql
      - otelcol
    extra_hosts:
      - "host.docker.internal:172.17.0.1" 

  mysql:
    image: mysql:5.7
    container_name: mysql
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: wallet
      MYSQL_PASSWORD: root
    ports:
      - 3306:3306
    volumes:
      - .docker/mysql:/var/lib/mysql
    extra_hosts:
      - "host.docker.internal:172.17.0.1"

  zookeeper:
    image: "confluentinc/cp-zookeeper:6.1.0"
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      TZ: Sao_Paulo/Brazil
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: "confluentinc/cp-enterprise-kafka:6.1.0"
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      TZ: Sao_Paulo/Brazil
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'
    extra_hosts:
      - "host.docker.internal:172.17.0.1"  

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    extra_hosts:
      - "host.docker.internal:172.17.0.1"  
  
  # ********************
  # Telemetry Components
  # ********************
  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    command:
      - "--log-level=debug"
      - "--memory.max-traces"
      - "10000"
      - "--query.base-path"
      - "/jaeger/ui"
      - "--prometheus.server-url"
      - "http://${PROMETHEUS_ADDR}"
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "${JAEGER_SERVICE_PORT}:${JAEGER_SERVICE_PORT}"                    # Jaeger UI
      - "14250:14250"
      - "14268:14268" # Jaeger collector
      - "4317"                           # OTLP gRPC default port
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
    logging: 
      driver: "json-file"
      options:
       max-size: "5m"
       max-file: "2"
    extra_hosts:
     - "host.docker.internal:172.17.0.1"

  # Grafana
  grafana:
    image: grafana/grafana:9.1.0
    container_name: grafana
    ports:
      - "${GRAFANA_SERVICE_PORT}:${GRAFANA_SERVICE_PORT}"
    depends_on:
      - prometheus
    logging: 
      driver: "json-file"
      options:
       max-size: "5m"
       max-file: "2"
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
      
  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.88.0
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    volumes:
      - ./pkg/otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
      - ./pkg/otelcollector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
    ports:
      - "4317"          # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
    depends_on:
      - jaeger
    logging: 
      driver: "json-file"
      options:
       max-size: "5m"
       max-file: "2"
    # extra_hosts:
    #   - "host.docker.internal:172.17.0.1"

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.34.0
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
    volumes:
      - ./pkg/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    depends_on:
      - otelcol
    deploy:
      resources:
        limits:
          memory: 300M
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
    logging: 
      driver: "json-file"
      options:
       max-size: "5m"
       max-file: "2"
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
       